#BlueJ class context
comment0.params=fields
comment0.target=void\ setFields(Field[][])
comment1.params=computer
comment1.target=void\ setComputer(Computer)
comment10.params=end\ fields
comment10.target=Field[][]\ simulateMove(java.awt.Point,\ Field[][])
comment2.params=fieldsCopy
comment2.target=boolean\ canBeatKing(Field[][])
comment2.text=\n\ \n\ @param\ fieldsCopy\n\ @return\n
comment3.params=
comment3.target=java.lang.Object\ clone()
comment4.params=
comment4.target=int\ getColor()
comment4.text=\n\ Gibt\ die\ Farbe\ der\ Figur\ (schwarz/weiss)\ zurueck.\n\ \n\ @return\ Die\ Farbe\ der\ Figur.\n
comment5.params=
comment5.target=java.awt.Point\ getLocation()
comment5.text=\n\ Gibt\ die\ Position\ der\ Figur\ auf\ dem\ Feld\ zurueck.\ Die\ Position\ besteht\n\ aus\ einer\ x-\ und\ einer\ y-Komponenten,\ die\ beide\ einen\ Wert\ zwischen\ 0\ und\n\ 7\ haben.\n\ \n\ @return\ Die\ Position\ der\ Figur.\n
comment6.params=fields
comment6.target=void\ markMoves(Field[][])
comment6.text=\n\ Markiert\ alle\ moeglichen\ Zuege,\ das\ heisst\ alle\ Felder,\ auf\ die\ die\ Figur\n\ ziehen\ kann\ und\ alle\ Figuren,\ die\ die\ Figur\ schlagen\ kann.\ Hier\ wird\ noch\n\ nicht\ getestet,\ ob\ der\ Zug\ illegal\ ist,\ da\ der\ Koenig\ anschliessend\ im\n\ Schach\ steht;\ dies\ geschieht\ erst\ spaeter\ in\ der\ Methode\ unmarkMoves.\n
comment7.params=x\ y
comment7.target=void\ setLocation(int,\ int)
comment8.params=fields
comment8.target=void\ unmarkMoves(Field[][])
comment8.text=\n\ Hier\ wird\ schliesslich\ getestet,\ ob\ der\ Koenig\ nach\ dem\ Zug\ im\ Schach\n\ stehen\ wuerde,\ was\ den\ Zug\ regelwidrig\ machen\ wuerde.\ Falls\ dies\ so\ ist,\n\ wird\ die\ Markierung\ wieder\ entfernt.\n
comment9.params=chessboard
comment9.target=void\ setChessboard(Chessboard)
numComments=11
