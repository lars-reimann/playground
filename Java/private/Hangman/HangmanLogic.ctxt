#BlueJ class context
comment0.params=textField\ guyDisplay\ lettersDisplay\ wordDisplay\ frame
comment0.target=HangmanLogic(javax.swing.JTextField,\ HangmanGuyDisplay,\ HangmanLettersDisplay,\ HangmanWordDisplay,\ HangmanFrame)
comment0.text=\n\ Die\ Instanzvariablen\ werden\ entsprechend\ mit\ den\ &uuml;bergebenen\n\ Parametern\ initialisiert.\ Dem\ boolean-Array\ f&uuml;r\ die\n\ Buchstabenliste\ wird\ eine\ neue\ Instanz\ zugewiesen,\ welche\ 26\n\ Wahrheitswerte\ enth&auml,lt.\n\ \n\ @param\ textField\ DasTextfeld\ zur\ Eingabe\ von\ Buchstaben.\n\ @param\ guyDisplay\ Die\ grafische\ Anzeige\ des\ Spielstandes.\n\ @param\ lettersDisplay\ Die\ grafische\ Anzeige\ der\ Buchstabenliste.\n\ @param\ wordDisplay\ Die\ grafische\ Anzeige\ des\ Wortes.\n\ @param\ frame\ Das\ Programmfenster.\n
comment1.params=
comment1.target=void\ check()
comment1.text=\n\ &Uuml;berpr&uuml;ft,\ ob\ der\ eingegeben\ Buchstabe\ oder\ die\ eingegebenen\ Buchstaben\ im\n\ zu\ erratenden\ Wort\ enthalten\ sind.\ Au&szlig;erdem\ wird\ die\ Siegbedingung\ getestet\ und\n\ entsprechende\ Meldungen\ werden\ gemacht.\n
comment10.params=
comment10.target=void\ showScores()
comment10.text=\n\ Zeigt\ die\ aktuellen\ Spielst&auml;nde\ in\ einem\ neuen\ Fenster\ im\ Frame\ an.\n
comment11.params=
comment11.target=void\ showSettings()
comment11.text=\n\ Zeigt\ einen\ Dialog\ an,\ in\ welchem\ man\ die\ Kategorie\ ver&auml;ndern\ kann.\ Der\ Spielstand\n\ ist\ davon\ nicht\ betroffen,\ wenn\ das\ Spiel\ noch\ nicht\ begonnen\ worden\ ist,\ sonst\ wird\ das\n\ aktuelle\ Spiel\ als\ verloren\ gewertet.\n
comment12.params=
comment12.target=void\ swap()
comment12.text=\n\ Verschiebt\ das\ aktuelle\ Wort,\ welches\ entweder\ geraten\ oder\ aufgel&ouml;st\n\ worden\ ist,\ an\ das\ Ende\ der\ Wortliste\ und\ schiebt\ den\ Zeiger\ um\ eine\ Position\n\ nach\ links.\ Dieser\ Zeiger\ gibt\ an,\ bis\ zu\ welchem\ Wort\ der\ Zufallsgenerator\n\ ausw&auml;hlen\ soll.\ Dadurch\ kann\ innerhalb\ einer\ Sitzung\ des\ Programmeskein\n\ Wort\ zweimal\ drankommen,\ au&szlig;er\ wenn\ die\ gesamte\ Wortliste\ durchlaufen\n\ worden\ ist.\n
comment2.params=
comment2.target=boolean\ checkEndOfGame()
comment2.text=\n\ Testet,\ ob\ das\ aktuelle\ Spiel\ gewonnen\ oder\ verloren\ ist.\ Ist\ dies\ der\ Fall,\ wird\ eine\n\ entsprechende\ Meldung\ angezeigt.\n\ \n\ @return\ Ob\ das\ Spiel\ beendet\ ist.\n
comment3.params=
comment3.target=java.lang.String\ chooseWord()
comment3.text=\n\ W&auml;hlt\ ein\ Wort\ aus\ der\ Wortliste\ der\ aktuellen\ Kategorie\ aus.\n\ \n\ @return\ Das\ ausgew&auml;hlte\ Wort.\n
comment4.params=
comment4.target=void\ close()
comment4.text=\n\ Speichert\ die\ Statistiken\ ab\ und\ schlie&szlig;t\ das\ Fenster.\ So\ wird\ das\n\ Programm\ beendet.\n
comment5.params=category
comment5.target=int\ computeLevel(int)
comment5.text=\n\ Berechnet\ eine\ Bewertung\ der\ aktuellen\ Statistik.\ Dabei\ wird\ sowohl\ der\n\ quantitative\ Aspekt,\ wie\ auch\ der\ qualitative\ Aspekt\ einbezogen.\ Das\n\ bedeutet,\ dass\ man\ mehr\ Punkte\ erh&auml;t,\ wenn\ man\ insgesamt\ mehr\n\ Begriffe\ oder\ Buchstaben\ gefunden\ hat\ und\ ebenfalls\ mehr\ Punkte,\ wenn\ die\n\ prozentuale\ Trefferquote\ besonders\ gut\ ist.\ Eine\ gute\ Trefferquote\ auf\n\ die\ ganzen\ W&ouml;rter\ wird\ bei\ beidem\ st&auml;rker\ belohnt\ als\ eine\ auf\n\ einzelne\ Buchstaben.\ Auch\ flie&szlig;t\ der\ Prozentsatz\ st&auml;rker\ ein\n\ als\ der\ absolute\ Wert\ der\ gewussten\ W&ouml;rter\ bzw.\ Buchstaben.\ Des\n\ Weiteren\ wird\ mit\ h&ouml;herem\ Punktestand\ das\ Gewinnen\ neuer\ Punkte\n\ immer\ schwieriger\ und\ zeitaufw&auml;diger,\ w&auml;hrend\ das\ Verlieren\ von\n\ Punkten\ immer\ schneller\ passieren\ kann.\ Theoretisch\ sind\ zwar\ unendlich\n\ hohe\ Puntzahlen\ m&ouml;glich,\ aber\ es\ sollte\ selbst\ bei\ perfektem\ und\n\ andauerndem\ Spiel\ nicht\ m&ouml;glich\ sein,\ den\ Integerbereich\ in\ einem\n\ Menschenleben\ zu\ knacken,\ au&szlig;er\ man\ manipuliert\ die\ Textdateien.\n\ Aber\ das\ macht\ ja\ sicher\ keiner...\n\ \n\ @param\ category\n\ \ \ \ \ \ \ \ \ \ \ \ Die\ Kategorie\ f&uuml;r\ die\ die\ Statistik\ erstellt\ werden\ soll.\n\ @return\ Die\ berechnete\ Bewertung.\n
comment6.params=category
comment6.target=void\ punishCheater(int)
comment6.text=\n\ Sollten\ unm&ouml;gliche\ Eingaben\ in\ der\ Statistik\ einer\ Textdatei\ erkannt\n\ werden,\ so\ sorgt\ diese\ Methode\ daf&uuml;r,\ den\ Benutzer\ &uuml;ber\ dies\ in\n\ Kenntnis\ gesetzt.\ Des\ Weiteren\ wird\ die\ gesamte\ Statistik\ dieser\ Kategorie\n\ gel&ouml;scht\ bzw.\ zur&uuml;ckgesetzt.\n\ \n\ @param\ category\ Die\ Kategorie,\ in\ welcher\ der\ Fehler\ gefunden\ worden\ ist.\n
comment7.params=
comment7.target=java.lang.String\ disguiseWord()
comment7.text=\n\ Erstellt\ aus\ dem\ aktuellen\ Wort,\ das\ verschleierte\ Wort,\ welches\ nur\ aus\ "\="\ und\ eventuellen\n\ Sonderzeichen\ besteht.\ Dies\ ist\ das\ Wort,\ welches\ anfangs\ angezeigt\ wird\ und\ welches\ bei\ korrekter\n\ Eingabe\ von\ Buchstaben\ ver&auml;ndert\ wird.\n
comment8.params=isFinished
comment8.target=void\ nextWord(boolean)
comment8.text=\n\ Sorgt\ f&uuml;\ die\ Auswahl\ und\ das\ Anzeigen\ eines\ neuen\ Wortes.\ Wenn\ das\ Spiel\ begonnen\ worden,\n\ aber\ noch\ nicht\ beendet\ worden\ ist,\ wird\ der\ Wert\ der\ verlorenen\ Spiele\ erh&ouml;ht.\n\ \n\ @param\ isFinished\ Gibt\ an,\ ob\ das\ Spiel\ beendet\ worden\ ist\ (gewonnen\ oder\ verloren).\n
comment9.params=
comment9.target=void\ setup()
comment9.text=\n\ Nimmt\ die\ Initialisierung\ des\ Spieles\ vor,\ indem\ die\ Wortlisten\ eingelesen\ werden\ und\ die\n\ Anzeigen\ entsprechend\ eingerichtet\ werden.\ Dies\ ist\ nicht\ Teil\ des\ Konstruktors,\ da\ hier\ keine\n\ Instantiierungen\ von\ Variablen\ an\ sich\ vorgenommen\ werden,\ sondern\ der\ Spielaufbau\ generiert\ wird.\n
numComments=13
